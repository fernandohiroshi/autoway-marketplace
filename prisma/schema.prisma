generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  phone         String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(COMPANY)
  slug          String    @unique
  isVIP         Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  cars          Car[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?
  address     String?
  website     String?
  socialMedia Json?
  avatar      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Car {
  id           String       @id @default(cuid())
  slug         String       @unique
  brand        String
  model        String
  year         Int
  price        Decimal
  transmission Transmission
  fuelType     FuelType
  condition    Condition
  mileage      Int?
  description  String?
  features     String[]
  images       String[]
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum Role {
  ADMIN
  COMPANY
}

enum Transmission {
  AUTOMATIC
  MANUAL
}

enum FuelType {
  GASOLINE
  DIESEL
  HYBRID
  ELECTRIC
  FLEX
}

enum Condition {
  NEW
  USED
  SEMI_NEW
}
